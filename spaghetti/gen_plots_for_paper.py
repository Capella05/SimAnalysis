# -*- coding: utf-8 -*-
"""
Creates Plots for the paper for the sim modelling challenge result ids

those ids are read from the file generated by gen_kappa_encl_data.py

Needs to be run on the server, in the glass environment!

cd /srv/lmt/worker
./run_glass this_file.py


saves the new plots in outdir


Created on Mon Sep 02 18:26:32 2013

@author: RafiK
"""



import os
import matplotlib.pylab as pl


idfile = '/srv/lmt/script_output/incr_result_resolution/ids.txt'

outdir = '/srv/lmt/script_output/gen_plots_for_paper/'

datadir = '/srv/lmt/tmp_media'


#which plots to draw
plts = [True, True, True, False]


glass_basis('glass.basis.pixels', solver=None)
exclude_all_priors()



with open(idfile, 'r') as f:
  ids = f.readlines()
  ids = [int(_) for _ in ids]
  print ids


for idd in ids:
  print 'regenerating %i' % idd
  idstr = '%06i' % idd
  fstr = os.path.join(datadir, idstr, 'state.txt')
  g = loadstate(fstr)
  
  outpath = os.path.join(outdir, idstr)  
  
  try:
    os.makedirs(outpath)
  except:
    print 'path creat failed'
    pass
  
  g.make_ensemble_average()
  
  if plts[0]:
    g.arrival_plot(g.ensemble_average, only_contours=True, colors='magenta', clevels=40)
    #pl.gca().axes.get_xaxis().set_visible(False)
    #pl.gca().axes.get_yaxis().set_visible(False)
    pl.savefig(outpath + '/img1.png')
    pl.close()
  
  if plts[1]:
    g.kappa_plot(g.ensemble_average, 0, with_contours=True, clevels=20, vmax=1, with_colorbar=False)
    #pl.gca().axes.get_xaxis().set_visible(False)
    #pl.gca().axes.get_yaxis().set_visible(False)
    pl.savefig(outpath + '/img2.png')
    pl.close()
  
  if plts[2]:
    g.srcdiff_plot(g.ensemble_average)
    #pl.gca().axes.get_xaxis().set_visible(False)
    #pl.gca().axes.get_yaxis().set_visible(False)
    pl.savefig(outpath + '/img3.png')
    pl.close()
  
  if plts[3]:
    g.srcdiff_plot_adv(g.ensemble_average, night=True, upsample=8)
    pl.savefig(outpath + '/img4.png', facecolor='black', edgecolor='none')
    pl.close()
    


